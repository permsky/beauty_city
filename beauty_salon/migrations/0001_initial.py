# Generated by Django 4.1.4 on 2022-12-07 19:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True, verbose_name='номер телефона')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='имя и фамилия')),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='фото')),
                ('specialty', models.CharField(max_length=255, verbose_name='специализация')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='дата начала работы')),
                ('experience', models.DurationField(blank=True, null=True, verbose_name='стаж')),
            ],
            options={
                'verbose_name': 'мастер',
                'verbose_name_plural': 'мастера',
            },
        ),
        migrations.CreateModel(
            name='Salon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='название')),
                ('address', models.CharField(max_length=255, unique=True, verbose_name='адрес')),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='фото')),
            ],
            options={
                'verbose_name': 'салон красоты',
                'verbose_name_plural': 'салоны красоты',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='фото')),
            ],
            options={
                'verbose_name': 'клиент',
                'verbose_name_plural': 'клиенты',
            },
            bases=('beauty_salon.customuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='фото')),
            ],
            options={
                'verbose_name': 'менеджер',
                'verbose_name_plural': 'менеджеры',
            },
            bases=('beauty_salon.customuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SMSCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=4, verbose_name='код')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='клиент')),
            ],
            options={
                'verbose_name': 'СМС код',
                'verbose_name_plural': 'СМС коды',
            },
        ),
        migrations.CreateModel(
            name='SchedulePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='название')),
                ('time', models.TimeField(verbose_name='время записи')),
                ('status', models.CharField(choices=[('available', 'available'), ('busy', 'busy')], max_length=10, verbose_name='статус')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_points', to='beauty_salon.master', verbose_name='мастер')),
            ],
            options={
                'verbose_name': 'расписание',
                'verbose_name_plural': 'расписания',
            },
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='название')),
                ('photo', models.ImageField(blank=True, upload_to='', verbose_name='фото')),
                ('price', models.PositiveIntegerField(verbose_name='цена')),
                ('master', models.ManyToManyField(related_name='procedures', to='beauty_salon.master', verbose_name='мастера')),
            ],
            options={
                'verbose_name': 'процедура',
                'verbose_name_plural': 'процедуры',
            },
        ),
        migrations.AddField(
            model_name='master',
            name='salon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='masters', to='beauty_salon.salon', verbose_name='салон'),
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('payed', 'payed'), ('not_payed', 'not_payed')], max_length=10, verbose_name='статус')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='master_entries', to='beauty_salon.master', verbose_name='мастер')),
                ('salon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='salon_entries', to='beauty_salon.salon', verbose_name='салон')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='procedure_entries', to='beauty_salon.procedure', verbose_name='процедура')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='client_entries', to='beauty_salon.client', verbose_name='клиент')),
            ],
            options={
                'verbose_name': 'запись',
                'verbose_name_plural': 'записи',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_created=True, verbose_name='дата')),
                ('text', models.TextField(blank=True, default='', verbose_name='текст отзыва')),
                ('rating', models.PositiveSmallIntegerField(verbose_name='оценка')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='ratings', to='beauty_salon.master', verbose_name='мастер')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='comments', to='beauty_salon.client', verbose_name='клиент')),
            ],
        ),
    ]
